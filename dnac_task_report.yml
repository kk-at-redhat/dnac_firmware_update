---
- name: Wait for last distribution task to finish
  when: not dnac_perform_activation | default(false)
  ansible.builtin.include_tasks:
    file: dnac_task_wait.yml
  vars:
    task_id: "{{ image_distribution_trigger.json.response.taskId }}"
    max_wait_time: "{{ dnac_distribution_max_time_final }}"
    check_delay: "{{ dnac_distribution_check_delay }}"

- name: Wait for last activation
  when: dnac_perform_activation | default(false)
  ansible.builtin.include_tasks:
    file: dnac_task_wait.yml
  vars:
    task_id: "{{ image_activation_trigger.json.response.taskId }}"
    max_wait_time: "{{ dnac_activation_max_time_final }}"
    check_delay: "{{ dnac_activation_check_delay }}"

# - name: Perform post-activation checks
#   when: dnac_perform_activation | default(false)
#   ansible.builtin.include_tasks:
#     file: odyssey_tasks.yml
#   vars:
#     odyssey_postactivation: true

- name: Refresh device status
  when: >
        ansible_loop.index == 1 or
         dnac_devices_refreshed.dnac_response.response | default([])
  cisco.dnac.network_device_info:
    dnac_host: "{{ dnac_host }}"
    dnac_username: "{{ dnac_username }}"
    dnac_password: "{{ dnac_password }}"
    dnac_verify: "{{ dnac_verify | default(omit) }}"
    hostname: "{{ dnac_devices_to_update | map(attribute='hostname') }}"
    offset: "{{ item }}"
  loop: "{{ range(1, 10000, 500) | list }}"
  loop_control:
    extended: true
  register: dnac_devices_refreshed

- name: Authenticate to DNAC API
  ansible.builtin.include_tasks:
    file: dnac_auth.yml

- name: Get task details for each batch
  ansible.builtin.uri:
    url: "https://{{ dnac_host }}/api/v1/image/task?taskUuid={{ item }}"
    method: GET
    headers:
      X-Auth-Token: "{{ auth_response.json.Token }}"
    validate_certs: "{{ dnac_verify | default(omit) }}"
    return_content: true
  loop: "{{ dnac_activation_task_ids if dnac_perform_activation | default(false) else dnac_distribution_task_ids }}"
  loop_control:
    label: "Getting details for task id: {{ item }}"
  register: task_details

- name: Generate failed report
  when: >
        item.taskStatus != "success" or
        ((dnac_devices_refreshed.results | map(attribute='dnac_response.response'))[0] |
          selectattr('hostname', 'equalto', item.hostName))[0].reachabilityStatus != 'Reachable'
  ansible.builtin.lineinfile:
    path: /tmp/distribution_list_failed.txt
    line: "{{ item.hostName }}"
    create: true
    mode: '666'
  loop: "{{ task_details.results | map(attribute='json.response') | flatten }}"
  loop_control:
    label: "Adding: {{ item.hostName }}"

- name: Generate success report
  when: >
        item.taskStatus == "success" and
        ((dnac_devices_refreshed.results | map(attribute='dnac_response.response'))[0] |
          selectattr('hostname', 'equalto', item.hostName))[0].reachabilityStatus == 'Reachable'
  ansible.builtin.lineinfile:
    path: /tmp/distribution_list_success.txt
    line: "{{ item.hostName }}"
    create: true
    mode: '666'
  loop: "{{ task_details.results | map(attribute='json.response') | flatten }}"
  loop_control:
    label: "Adding: {{ item.hostName }}"

- name: Generate csv report
  ansible.builtin.lineinfile:
    path: /tmp/distribution_results.csv
    line: "{{ item.hostName }},\
           {{ dnac_devices_to_update | selectattr('hostname', 'equalto', item.hostName) | map(attribute='managementIpAddress') | first }},\
           {{ dnac_devices_to_update | selectattr('hostname', 'equalto', item.hostName) | map(attribute='platformId') | first }},\
           {{ dnac_devices_to_update | selectattr('hostname', 'equalto', item.hostName) | map(attribute='serialNumber') | first }},\
           {{ dnac_devices_to_update | selectattr('hostname', 'equalto', item.hostName) | map(attribute='softwareVersion') | first }},,,,\
           {{ item.taskStatus | upper }},\
           {{ ((dnac_devices_refreshed.results | map(attribute='dnac_response.response'))[0] |
                selectattr('hostname', 'equalto', item.hostName))[0].reachabilityStatus }}"
    create: true
    mode: '666'
  loop: "{{ task_details.results | map(attribute='json.response') | flatten }}"
  loop_control:
    label: "Adding: {{ item.hostName }}"

---
- name: Wait for last distribution task to finish
  ansible.builtin.include_tasks:
    file: dnac_distribution_wait.yml
  vars:
    task_id: "{{ image_distribution_trigger.json.response.taskId }}"
    max_wait_time: "{{ dnac_distribution_max_time_final }}"

- name: Authenticate to DNAC API
  ansible.builtin.include_tasks:
    file: dnac_auth.yml

- name: Get task details for each batch
  ansible.builtin.uri:
    url: "https://{{ dnac_host }}/api/v1/image/task?taskUuid={{ item }}"
    method: GET
    headers:
      X-Auth-Token: "{{ auth_response.json.Token }}"
    validate_certs:  "{{ dnac_verify | default(omit) }}"
    return_content: true
  loop: "{{ dnac_distribution_task_ids }}"
  loop_control:
    label: "Getting details for task id: {{ item }}"
  register: task_details

- name: Generate failed report
  when: item.taskStatus != "success"
  ansible.builtin.lineinfile:
    path: /tmp/distribution_list_failed.txt
    line: "{{ item.hostName }}"
    create: true
    mode: '666'
  loop: "{{ task_details.results | map(attribute='json.response') | flatten }}"
  loop_control:
    label: "Adding: {{ item.hostName }}"

- name: Generate success report
  when: item.taskStatus == "success"
  ansible.builtin.lineinfile:
    path: /tmp/distribution_list_success.txt
    line: "{{ item.hostName }}"
    create: true
    mode: '666'
  loop: "{{ task_details.results | map(attribute='json.response') | flatten }}"
  loop_control:
    label: "Adding: {{ item.hostName }}"

- name: Generate csv report
  ansible.builtin.lineinfile:
    path: /tmp/distribution_results.csv
    line: "{{ item.hostName }},\
           {{ dnac_devices_to_update | selectattr('hostname', 'equalto', item.hostName) | map(attribute='managementIpAddress') | first }},\
           {{ dnac_devices_to_update | selectattr('hostname', 'equalto', item.hostName) | map(attribute='platformId') | first }},\
           {{ dnac_devices_to_update | selectattr('hostname', 'equalto', item.hostName) | map(attribute='serialNumber') | first }},\
           {{ dnac_devices_to_update | selectattr('hostname', 'equalto', item.hostName) | map(attribute='softwareVersion') | first }},,,,\
           {{ item.taskStatus | upper }},"
    create: true
    mode: '666'
  loop: "{{ task_details.results | map(attribute='json.response') | flatten }}"
  loop_control:
    label: "Adding: {{ item.hostName }}"

---
- name: Build distribution payload for custom image - Batch {{ ansible_loop.index }}
  when: dnac_image_overwrite | default('')
  ansible.builtin.set_fact:
    dnac_image_distribution_payload: "{{ dnac_image_distribution_payload | default([]) +
                                         [{'deviceUuid': item.id,
                                           'imageUuid': image_details.dnac_response.response[0].imageUuid}] }}"
  loop: "{{ device_list }}"
  loop_control:
    label: "Adding to payload: {{ item.hostname }}"

- name: Build distribution payload for Golden image - Batch {{ ansible_loop.index }}
  when: not dnac_image_overwrite | default('')
  ansible.builtin.set_fact:
    dnac_image_distribution_payload: "{{ dnac_image_distribution_payload | default([]) + [{'deviceUuid': item.id}] }}"
  loop: "{{ device_list }}"
  loop_control:
    label: "Adding to payload: {{ item.hostname }}"

- name: Authenticate to DNAC - Batch {{ ansible_loop.index }}
  block:
    - name: Get DNAC API token - Batch {{ ansible_loop.index }}
      ansible.builtin.uri:
        url: "https://{{ dnac_host }}/dna/system/api/v1/auth/token"
        method: POST
        user: "{{ dnac_username }}"
        password: "{{ dnac_password }}"
        force_basic_auth: true
        validate_certs: "{{ dnac_verify | default(omit) }}"
        return_content: true
        headers:
          Content-Type: "application/json"
      no_log: true
      register: auth_response

  rescue:
    - name: Extract authentication error - Batch {{ ansible_loop.index }}
      ansible.builtin.set_fact:
        auth_error: "{{ auth_response.msg }}"
      no_log: true

    - name: Show authentication error - Batch {{ ansible_loop.index }}
      ansible.builtin.debug:
        msg: " Getting API token from DNAC failed with the following error: {{ auth_error }}"
      failed_when: true

- name: Trigger software image distribution - Batch {{ ansible_loop.index }}
  ansible.builtin.uri:
    url: "https://{{ dnac_host }}/dna/intent/api/v1/image/distribution"
    method: POST
    headers:
      X-Auth-Token: "{{ auth_response.json.Token }}"
      Content-Type: "application/json"
    body_format: json
    validate_certs: "{{ dnac_verify | default(omit) }}"
    body: "{{ dnac_image_distribution_payload }}"
    status_code: 200, 201, 202, 204, 206
  register: image_distribution_trigger

- name: Wait for distribution task to finish
  cisco.dnac.task_info:
    dnac_host: "{{ dnac_host }}"
    dnac_username: "{{ dnac_username }}"
    dnac_password: "{{ dnac_password }}"
    dnac_verify: "{{ dnac_verify | default(omit) }}"
    taskId: "{{ image_distribution_trigger.json.response.taskId }}"
  register: distribution_task_details
  until: >
         'Running = 0, Pending = 0' in distribution_task_details.dnac_response.response.progress or
         (distribution_task_details.dnac_response.response.failureReason is defined and
          'auto-aborted' in distribution_task_details.dnac_response.response.failureReason)
  delay: "{{ dnac_distribution_check_delay }}"
  retries: "{{ dnac_distribution_max_time / dnac_distribution_check_delay | int }}"
